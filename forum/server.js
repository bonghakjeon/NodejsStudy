// [코딩애플] Node.js, MongoDB 스터디 
// Part 1 : (신버전)

// 1강 - 남자라면 서버개발을 할 줄 알아야함

// 2강 - Nodejs의 장점이 뭐냐면

// 3강 - Node.js, Express 설치와 셋팅


// 1. 터미널 명령어 "npm init -y" 입력 및 엔터 -> package.json 파일 생성 

// 2. 터미널 명령어 "npm install express" 입력 및 엔터 -> express 라이브러리 설치 완료 

// 3. 2번에서 설치한 express 라이브러리 사용해서 아래처럼 서버 코드 작성 
const express = require('express') // express 라이브러리 사용
const app = express() // express 라이브러리 사용

// 서버 띄우는 코드(app.listen) (내 컴퓨터 Port 하나 오픈하는 문법이다. 이렇게 Port를 오픈해야 다른 컴퓨터가 내 컴퓨터 쪽으로 웹서비스를 연결하여 통신하여 들어올 수 있다.)
// 서버 띄울 PORT 번호 입력란 (Port 8080)
app.listen(8080, ()=>{
  console.log('http://localhost:8080 에서 서버 실행중')
})

// 서버 기능(Http - Get) 구현 예시
// app.get('/어쩌구', (요청, 응답)=>{
//   응답.send('보내줄 웹페이지 내용')
// }) 

// ** 서버 기능 배운 내용 요약
// 1. 웹페이지 하나 만들고 싶으면 함수 app.get 부터 아래 3줄 가져다가 씁시다.
// app.get('/', (요청, 응답)=>{
//   응답.send('반갑다')
// })

// 2. 함수 app.get() 소괄호() 안에 들어가는 함수 "(요청, 응답)=>{ 응답.send('반갑다') }" 를 콜백함수라고 부르고 코드들을 순차적으로 실행할 때 가끔 씁니다.  

// 3. html파일 보내고 싶으면 응답.sendFile() 쓰면 됩니다. 

// 간단한 서버 기능 - 메인페이지1 (Http - Get 방식) 
// 1) 누가 메인페이지 접속시('/') (크롬 웹브라우저 실행 -> URL 주소 "http://localhost:8080" 입력 및 엔터 )
// 2) '반갑다'는 문자열을 유저에게 보내주기 (크롬 웹브라우저 화면 '반갑다' 문자열 출력 )
// app.get('/', (요청, 응답)=>{
//   응답.send('반갑다')
// })

// 간단한 서버 기능 2 - 메인페이지2 (Http - Get 방식)
// 1) 누가 메인페이지 접속('/') (크롬 웹브라우저 실행 -> URL 주소 "http://localhost:8080" 입력 및 엔터 )
// 2) 자동으로 함수 "app.get()" 실행 -> 접속요청 처리
// 3) 2)번의 함수 "app.get()" 실행되고 나서 -> 2)번의 함수 "app.get()" 소괄호() 안에 존재하는 
//    콜백함수 "function(요청, 응답) => { 응답.sendFile(__dirname + '/index.html') }" 내에 있는 코드 "응답.sendFile(__dirname + '/index.html')" 가 실행
// 4) .sendFile(__dirname + '/index.html') 입력하면 index.html 파일을 유저에게 보내주기 (크롬 웹브라우저 화면 index.html 웹페이지 출력)
// ** 함수 sendFile 사용 예시 - sendFile('파일경로')
// 여기서 말하는 '파일경로' 적고 싶으면 
// __dirname (언더바(_) 2개 필수) 쓰면 현재 server.js 파일의 상위 폴더(디렉토리) 절대경로가 나온다.
// index.html 파일 경로를 구하려면
// index.html 파일은 server.js와 같은 폴더(디렉토리)에 존재하므로 
// __dirname (언더바(_) 2개 필수) 뒤에 '/index.html'만 추가하면
// index.html 파일경로를 구할 수 있다.
app.get('/', function(요청, 응답) {
  응답.sendFile(__dirname + '/index.html')
})

// 서버기능 - 오늘의 뉴스(Http - Get 방식) 
// 1) 누가 오늘의 뉴스 페이지 접속('/news') (크롬 웹브라우저 실행 -> URL 주소 "http://localhost:8080/news" 입력 및 엔터)
// 2) 자동으로 함수 "app.get()" 실행 -> 접속요청 처리
// 3) 2)번의 함수 "app.get()" 실행되고 나서 -> 2)번의 함수 "app.get()" 소괄호() 안에 존재하는 콜백함수 "(요청, 응답) => { 응답.send('오늘 비옴') }" 내에 있는 코드 "응답.send('오늘 비옴')" 가 실행
// 4) '오늘 비옴' 문자열을 유저에게 보내주기 (크롬 웹브라우저 화면 '오늘 비옴' 문자열 출력)
app.get('/news', (요청, 응답)=>{
  응답.send('오늘 비옴')
})

// 서버기능 - 쇼핑페이지(Http - Get 방식)
// 1) 누가 쇼핑페이지 접속시('/shop') (크롬 웹브라우저 실행 -> URL 주소 "http://localhost:8080/shop" 입력 및 엔터)
// 2) '쇼핑페이지입니다' 문자열을 유저에게 보내주기 (크롬 웹브라우저 화면 '쇼핑페이지입니다~' 문자열 출력)
app.get('/shop', (요청, 응답)=>{
  응답.send('쇼핑페이지입니다')
}) 

// 오늘의 숙제 :
// 누가 /about으로 접속하면 여러분이 누군지 대충 소개하는 html 파일을 보내줍시다.
// 그럼 html 파일도 하나 더 필요하겠죠?
// 쉬워서 답은 없음 
// 서버기능 - 자기소개(Http - Get 방식)
app.get('/about', function(요청, 응답) {
  응답.sendFile(__dirname + '/about.html')
})

// 서버기능 - 상품목록 json 데이터 전송(Http - Get 방식)
// 1) 누가 상품목록 json 데이터 접속(요청)('/data') (크롬 웹브라우저 실행 -> URL 주소 "http://localhost:8080/data" 입력 및 엔터 )
// 2) 자동으로 함수 "app.get()" 실행 -> 접속요청 처리
// 3) 2)번의 함수 "app.get()" 실행되고 나서 -> 2)번의 함수 "app.get()" 소괄호() 안에 존재하는 
//    콜백함수 "function(요청, 응답) => { 응답.sendFile(__dirname + '/data.json') }" 내에 있는 코드 "응답.sendFile(__dirname + '/data.json')" 가 실행
// 4) .sendFile(__dirname + '/data.json') 입력하면 data.json 파일을 유저에게 보내주기 (크롬 웹브라우저 화면 data.json 파일에 속한 상품목록 json 데이터 출력)
app.get('/data', function(요청, 응답) {
  응답.sendFile(__dirname + '/data.json')
})

// 4. sever.js 파일 저장 및 터미널 명령어 "node server.js" 입력 및 엔터 -> "server.js" 파일 실행 -> 서버 띄우기 완료 -> 터미널 창에 문자열 'http://localhost:8080 에서 서버 실행중' 출력 

// 5. 4번에서 터미널에 출력된 URL 주소 http://localhost:8080 에 마우스 커서 갖다대고 키보드 단축키 Ctrl + 마우스 왼쪽 버튼 클릭

// 6. 크롬 웹브라우저 실행 -> '반갑다' 문자열 웹브라우저 출력 

// 자바스크립트 문법(함수 - function) 설명 
// (예제 1) function 함수1(){ ... }
// (예제 2) var 함수2 = () => { ... }
// (예제 3) app.get('/어쩌구', (요청, 응답) => { 응답.send('테스트') }) - Node.js "app.get()"도 함수 사용문법임 / (예제 3)의 () => {} 부분도 함수 만들어서 집어넣는 문법입니다.

// 자바스크립트 문법(콜백함수) 설명 
// app.get('/어쩌구', (요청, 응답) => { 응답.send('테스트') }) 함수 호출할 때, "app.get()" 함수 소괄호() 안에 들어가는 함수 "(요청, 응답) => { 응답.send('테스트') }"를 콜백함수라고 부른다.
// 콜백함수는 자바스크립트에서 특정 함수들이나 특정 코드들을 순차적으로 차례차례 실행하고 싶을 때 자주 사용합니다. 

// 자바스크립트 문법(콜백함수) 예제
// 아래 주석친 코드 실행 순서 
// 1) 누가 오늘의 뉴스 페이지 접속('/news') (크롬 웹브라우저 실행 -> URL 주소 "http://localhost:8080/news" 입력 및 엔터)
// 2) 자동으로 함수 "app.get()" 실행 -> 접속요청 처리
// 3) 2)번의 함수 "app.get()" 실행되고 나서 -> 2)번의 함수 "app.get()" 소괄호() 안에 존재하는 콜백함수 "(요청, 응답) => { 응답.send('오늘 비옴') }" 내에 있는 코드 "응답.send('오늘 비옴')" 가 실행
// 4) '오늘 비옴' 문자열을 유저에게 보내주기 (크롬 웹브라우저 화면 '오늘 비옴' 문자열 출력)
// app.get('/news', (요청, 응답) => {
//   응답.send('오늘 비옴')
// }) 

// ** 자바스크립트 문법(콜백함수) 주의사항 ** 
// 1) 콜백함수는 맘대로 쓸 수는 없고 콜백함수 쓰라는 곳만 쓸 수 있다.
// 2) 함수 소괄호 안에 들어가는 함수를 '콜백함수'라고 부른다

// 용어 정리 
// (1) 터미널 명령어 중 "npm"은 라이브러리 설치를 도와주는 보조 프로그램이다. node.js를 설치하면 누구나 npm을 이용할 수 있다.
// (2) PORT란? 
// PORT가 뭐냐면 
// 여러분 컴퓨터는 항상 외부 컴퓨터와 통신할 수 있게 설계되어있습니다.
// 랜선만 꽂혀있으면 다른 사람이 여러분 컴퓨터로 접속을 할 수 있고 그렇습니다. 
// 웹서버도 실은 다른 사람 컴퓨터에 접속하는 행위랑 똑같습니다. 접속하면 웹페이지를 보여주는 것일 뿐
// 하지만 평상시엔 남들이 내 컴퓨터에 무단으로 접속을 할 수는 없습니다. 
// 여러분들이 컴퓨터에 구멍을 하나 뚫어놓아야 거기로 외부 사람들이 내 컴퓨터로 접속할 수 있습니다
// 구멍을 전문용어로 PORT라고 부르고 컴퓨터에는 내 맘대로 오픈할 수 있는 포트 구멍이 6만개 정도 있습니다.

// 그래서 아까 누가 내 컴퓨터에 접속할 수 있게 만들기 위해서 
// 8080번째 포트하나를 맘대로 연겁니다. 
// 이제 외부 컴퓨터가 여러분 아이피주소:8080이라고 브라우저 주소창에 입력하면
// 여러분 컴퓨터로 들어올 수 있게 되는 것입니다. 
// (터미널에 ipconfig 치면 뜨는 그 아이피주소임)

// 참고로 열 수 있는 포트는 6만개 정도 있는데
// 컴퓨터가 이미 예약해서 쓰고 있는 포트번호들도 여러개 있습니다.
// 그런건 쓰면 안됩니다. 