<!-- 키보드로 느낌표(!) 입력 -> 엔터(Enter)나 탭(Tab)키 누르면 아래와 같은 html 파일 기본 템플릿 생성됨. -->
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>

  <!-- 부트스트랩(BootStrap) 설치  -->
  <!-- 유튜브  -->
  <!-- 참고 URL - https://youtu.be/iHWlRtWNquA?si=uVzQUkL2QL3a0RI1 -->
  <!-- 참고 2 URL - https://youtu.be/F-v6EcMPJwA?si=GgTOZ1qE5w1m_2lR -->
  <!--  참고 URL - https://getbootstrap.com/docs/5.1/getting-started/introduction/#starter-template  -->
  <!--  참고 URL - https://getbootstrap.com/docs/5.3/getting-started/introduction/#starter-template  -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" 
        rel="stylesheet" 
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" 
        crossorigin="anonymous">

  <!--  server.js 소스파일에서 자바스크립트 코드로 아래처럼 폴더 "public"를 명시하였기 때문에 아래 <link> 태그 속성 "href"에 /public 명시할 필요 없음 (2024.11.22 jbh)  --> 
  <!--  app.use(express.static(__dirname + '/public'));  -->
  <link href="/main.css" rel="stylesheet">
</head>
<!-- <body> 태그 안에 웹페이지 디자인 시작 -->
<body class="grey-bg">
  <!--  include() 사용하여 다른 ejs 파일(nav.ejs)안에 들어있는 html 코드를 list.ejs 파일에 복사(첨부)하여 화면에 출력  -->
  <!--  <%- %> 사용하면 그 안에 들어있는게 html인 경우 그걸 실제로 렌더링 처리해서 화면 출력  -->
  <!--  <%= %> 사용하면 그 안에 들어있는게 html이어도 그걸 렌더링해주진 않고 일반 문자처럼 화면 출력 -->
  <!--  아래처럼 include() 안에 { age : 20 } 작성하면 다른 ejs 파일(nav.ejs)로 데이터 전송  -->
  <%- include('nav.ejs', { age : 20 }) %>

  <!--  <%= 글목록 %><br>  -->   <!--  서버로 부터 받은 데이터(글목록) 화면 출력 (array나 object 데이터를 그대로 html에 박을 경우 화면에 출력시 데이터가 깨지고 안 보이는 오류 발생!)  -->
  <%= JSON.stringify(글목록) %>   <!--  array나 object 데이터를 그대로 html에 박을 경우 화면에 출력시 데이터가 깨지고 안 보이므로, 함수 JSON.stringify 사용해야 화면상에 array나 object 데이터가 정상적으로 출력 가능  --> 
  
  <!--  ejs 문법 <% %> 및 자바스크립트 문법 for 반복문 사용해서 화면에 데이터 반복적으로 출력  -->
  <!--  <% for (var i = 0; i < 글목록.length; i++) { %>  -->
  <!--  <% } %>  -->
  <div class="white-bg">
    <% for (let i = 0; i < 글목록.length; i++) { %>
      <div class="list-box">
        <!--  <%= JSON.stringify(글목록[i]) %>  -->
        <!--  <%= JSON.stringify(글목록[i]._id) %>  -->

        <!--  서버사이드 렌더링이란? 서버에서 클라이언트로 html 코드 보내줄 때, 미리 데이터를 채워서 보내주는 기술이다.  -->
        <!--  클라이언트사이드 렌더링이란? 서버에서 빈 html 파일과 데이터만 클라이언트로 보내고, 웹브라우저 안에서 서버로 부터 받은 html 파일과 데이터 가지고 동적으로 렌더링 해주는 기술이다.  -->
        <!--  ejs 문법 <%= %> 사용해서 화면에 데이터 출력  -->
        <!--  <%= %> 사용하면 그 안에 들어있는게 html이어도 그걸 렌더링해주진 않고 일반 문자처럼 화면 출력 -->
        <h4>
          <!--  <a> 태그로 출력되는 링크 문자열에 밑줄(___ - 언더바)을 제거하려면 style 속성 style="text-decoration : none" 설정 구현 (2024.12.24 jbh)  -->
          <a href="/detail/<%= 글목록[i]._id %>"
             style="text-decoration : none">
            <%= 글목록[i].title %>
          </a>
          <!-- <%= 글목록[i]._id %> -->
          <!--  글수정 페이지(edit.ejs) 이동 기능  -->
          <a href="/edit/<%= 글목록[i]._id %>">✏️</a>
          <!--  TODO : <span> 태그 글삭제 버튼 클릭시 글삭제 이벤트 리스너로 파라미터값을 넘기기 위해 속성 data-id 사용 구현 (2024.01.07 jbh)  -->
          <!--  참고 URL - https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*  -->
          <!--  참고 2 URL - https://www.dofactory.com/html/span/data  -->
          <!--  참고 3 URL - https://b.redinfo.co.kr/17  -->
          <!--  참고 4 URL - https://stackoverflow.com/questions/54011229/get-a-value-of-span-tag-html  -->
          <!--  참고 5 URL - https://overcome-diary.tistory.com/36  -->
          <span class="delete" data-id="<%= 글목록[i]._id %>">🗑️</span>
        </h4>
        <p><%= 글목록[i].content %></p>
      </div>
    <% } %>
    <!-- <div class="list-box"> -->
      <!-- <h4><%= 글목록[1].title %></h4> -->
      <!-- <p><%= 글목록[1].content %></p> -->
      <!-- <h4>글제목임</h4> -->
      <!-- <p>글내용임</p> -->
    <!-- </div> -->
  </div>    

  <div>
    <!--  ejs 문법 <% %> 및 자바스크립트 문법 for 반복문 사용해서 화면에 데이터 반복적으로 출력  -->
    <% for(var i = 0; i < 3; i++) { %>
      <h4>안뇽</h4>
    <% } %>
  </div>


  <!--  주의사항 - 아래 <script> 태그는 <body> 태그 가장 아래에 위치 해야함.  -->
  <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" 
          integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" 
          crossorigin="anonymous"></script>  -->
  
  <!--  TODO : 아래 <script> 태그 속성 중 "integrity", "crossorigin" 삭제 후 해당 <script> 밑에 또 다른 <script> 태그 만들어서 AJAX - DELETE 요청 가능 하도록 구현(2025.01.07 jbh)  -->
  <!--  참고 URL - https://mozzang.tistory.com/219  -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script> 

  <script>
    /// <script> 태그안에 자바스크립트를 적을 수 있다. 그럼 페이지 로드시 자동 실행됨
    /// querySelectorAll로 원하는 html 요소를 모두 찾을 수 있고 addEventListener(C# 이벤트 핸들러와 비슷한 기능) 쓰면 그걸 클릭시 실행할 코드를 입력할 수 있다. 
    /// fetch() 는 AJAX 요청(GET, POST, PUT, DELETE) 날릴 때 쓰는 자바스크립트 기본 함수이다.
    /// AJAX란?
    /// 웹브라우저 화면 새로고침 없이도 서버에게 요청을 날리고 데이터를 주고받는 기능이다. (주소창에 URL 입력하거나 <form> 태그를 전송하는 경우에는 웹브라우저 화면이 항상 새로고침이 되기 때문)
    /// 웹브라우저 화면 새로고침 없이 서버랑 데이터를 주고받으면 더 이쁘고 부드러운 감성가득한 사이트를 운영하고 싶을 때 사용함.
    
    /// <summary>
    /// delete라는 클래스명을 가진 여러 html 요소 중 0번째를 찾아서 클릭시 함수 fetch() 실행
    /// 참고 URL - https://overcome-diary.tistory.com/36
    /// </summary>
    document.querySelectorAll('.delete')[0].addEventListener('click', function(e) {
      console.log('delete 테스트')
      // let deleteid = document.querySelectorAll('.delete-icon')[0].getAttribute("data-id");
      let deleteid = e.target.dataset.id;
      fetch('/delete?deleteid=' + deleteid, {
        method : 'DELETE',   // DELETE 요청하기 위해 method 속성에 'DELETE' 할당 
      })
 
      // *** URL 파라미터 / query string 장점 *** 
      // 둘 다 아무 API로 GET, POST, PUT, DELETE 요청할 때 전부 쓸 수 있다는게 장점이다.

      // *** URL 파라미터 / query string 단점 *** 
      // 단점은 URL에 정보가 노출된다는 겁니다. 
      // 하여 URL 파라미터 / query string의 경우 짧고 안중요한 데이터 전송하는데 쓰는게 좋다. 


      // AJAX - fetch() 
      // GET 요청
      // query string으로 서버에 데이터 전송하기 
      // query string을 사용하면 서버 파일(server.js)에 아무 셋팅할 필요없고 
      // 그냥 아무 API로 GET, POST, PUT, DELETE 요청할 때 아래처럼 쓴다.
      // (예1) 서버 파일(server.js)로 1개 데이터 "데이터이름=데이터값" 전송
      // 주의사항 - 서버 파일(server.js)에서 전송한 데이터를 꺼내서 출력하고 싶으면 console.log(요청.query) 코드 사용하면 데이터 출력 가능
      // fetch('/abc?데이터이름=데이터값') 
      // (예2) 서버 파일(server.js)로 2개 데이터 "데이터이름=데이터값", "데이터이름2=데이터값2" 전송
      // 주의사항 
      // 1) 서버 파일(server.js)로 데이터 2개 이상 전송하려면 아래처럼 데이터이름과 데이터이름2 사이에 & 기호로 연결 필수!
      // 2) 서버 파일(server.js)에서 전송한 데이터를 꺼내서 출력하고 싶으면 console.log(요청.query) 코드 사용하면 데이터 출력 가능  
      // fetch('/abc?데이터이름=데이터값&데이터이름2=데이터값2') 

      // AJAX - fetch() 
      // GET 요청 예시
      // fetch('/URL~~')

      // POST 요청 예시
      // 주의사항 
      // 진짜 POST 요청이 잘 가는지 확인 하려면 
      // fetch() 잘 작성해서 실행시키고 
      // 서버 파일(server.js)에서 console.log(요청.body) 코드 작성해서 출력 테스트 진행 
      // 참고로 console.log(요청.body)가 잘 안나오면 서버파일(server.js) 상단에 app.use(express.json()) 이런게 없어서 그럴 수도 있다.
      // fetch('/URL~~', {
      //   method : 'POST',   // POST 요청하기 위해 method 속성에 'POST' 할당 
      //   headers : { 'Content-Type' : 'application/json' },   // 부가정보 기입란 headers에 'Content-Type' : 'application/json' 할당해야 array, object 데이터를 서버로 잘 전송할 수 있다.
      //   body : JSON.stringify({a : 1})   // body 안에는 서버로 전송할 array, object 데이터({a : 1})를 집어 넣는다. 단, array, object 데이터({a : 1})를 그냥 넣으면 깨지기 때문에 함수 JSON.stringify() 를 써서 문자형태로 (JSON형태로) 바꿔서 전송 필수!
      // })
    })
  </script>
</body>
</html>






